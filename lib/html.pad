{@
from "lib/stream.pad" import Stream  // TODO: remove lib/

/**
 * Tag
 */
struct Tag:
    type = nil
    name = nil
    content = nil
    attrs = {}

    def new():
        return Tag()
    end

    met isNameHead(self, c):
        return c.isalpha() or c.isdigit() or c == "_"
    end

    met isName(self, c):
        return c.isalpha() or c.isdigit() or c == "_" or c == "-"
    end

    met skip(self):
        for not self.strm.eof():
            if self.strm.get() != " ":  // TODO: isspace
                self.strm.prev()
                break
            end
        end
    end

    met parse(self, strm):
        self.strm = strm
        self.childs = []
        self.attrs = {}
        m = "first"
        buf = ""
        key = ""
        val = ""

        for not self.strm.eof():
            c = self.strm.get()
            // puts(m, c)
            if m == "first":
                if c == "<":
                    m = "found <"
                else:
                    buf += c
                    m = "read text tag"
                end
            elif m == "read text tag":
                if c == "<":
                    self.strm.prev()
                    self.type = "text"
                    self.content = buf
                    return nil
                else:
                    buf += c
                end
            elif m == "found <":
                if self.isNameHead(c):
                    m = "read name"
                    buf += c
                elif c == "/":
                    m = "found </"
                elif c == " ":  // TODO: isspace()
                    // pass
                end
            elif m == "found </":
                if self.isNameHead(c):
                    m = "read end name"
                    buf += c
                elif c == " ":
                    // pass
                end
            elif m == "read end name":
                if self.isName(c):
                    buf += c
                elif c == ">":
                    return nil
                elif c == " ":
                    // pass
                end
            elif m == "read name":
                if self.isName(c):
                    buf += c
                elif c == " ":  // TODO: isspace()
                    self.name = buf
                    buf = ""
                    self.skip()
                    m = "read attr key"
                elif c == "/":
                    self.skip()
                    c = self.strm.get()
                    if c == ">":
                        return nil
                    else:
                        self.strm.prev()
                        m = "first"
                    end
                elif c == ">":
                    self.type = "normal"
                    self.name = buf
                    buf = ""
                    m = "first"
                    tag = Tag()
                    err = tag.parse(self.strm)
                    if err:
                        return err
                    end
                    self.childs.push(tag)
                end
            elif m == "read attr key":
                if self.isName(c):
                    buf += c
                elif c == " ":  // TODO: isspace
                    self.skip()
                    key = buf
                    buf = ""
                    m = "read attr ="
                elif c == "=":
                    self.skip()
                    key = buf
                    buf = ""
                    m = "read attr val"
                elif c == ">":
                    self.type = "normal"
                    self.name = buf
                    buf = ""
                    m = "first"
                    tag = Tag()
                    err = tag.parse(self.strm)
                    if err:
                        return err
                    end
                    self.childs.push(tag)
                end
            elif m == "read attr =":
                if c == "=":
                    self.skip()
                    m = "read attr val"
                else:
                    self.strm.prev()
                    m = "read attr key"
                end
            elif m == "read attr val":
                if c == "\"":
                    m = "read attr val str"
                elif c == ">":
                    val = buf
                    buf = ""
                    self.attrs[key] = val
                    self.type = "normal"
                    self.name = buf
                    buf = ""
                    m = "first"
                    tag = Tag()
                    err = tag.parse(self.strm)
                    if err:
                        return err
                    end
                    self.childs.push(tag)
                else:
                    buf += c
                end
            elif m == "read attr val str":
                if c == "\"":
                    val = buf
                    buf = ""
                    self.attrs[key] = val
                    m = "read attr key"
                else:
                    buf += c
                end
            end
        end
    end
end

/**
 * Document
 */
struct Document:
    childs = nil

    def new():
        return Document()
    end

    met parse(self, strm):
        self.strm = strm
        self.childs = []
        buf = ""
        m = "first"

        for not self.strm.eof():
            c = self.strm.get()
            if m == "first":
                if c == "<":
                    self.strm.prev()
                    tag = Tag()
                    err = tag.parse(self.strm)
                    if err:
                        return err
                    end
                    self.childs.push(tag)
                else:
                    m = "read text tag"
                    buf += c
                end
            elif m == "read text tag":
                if c == "<":
                    tag = Tag()
                    tag.text = buf
                    buf = ""
                    self.childs.push(tag)

                    self.strm.prev()
                    tag = Tag()
                    err = tag.parse(self.strm)
                    if err:
                        return err
                    end
                    self.childs.push(tag)
                else:
                    buf += c
                end
            end
        end
    end
end

/**
 * HTML Parser
 */
struct HtmlParser:
    document = nil

    def new():
        return HtmlParser()
    end

    met parse(self, src):
        strm = Stream.new(src)
        self.document = Document.new()
        return self.document.parse(strm)
    end
end

@}