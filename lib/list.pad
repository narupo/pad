{@
/* Created at 2020/10/09
 * A simple list
 */

/**
 * Node of list
 */
struct Node:
    value = nil  // value of node
    next = nil  // next node
end

/**
 * Linked list structure
 */
struct List:
    head = nil

    met dump(self):
        if self.head == nil:
            return 
        end

        for cur = self.head; cur; cur = cur.next:
            puts(cur.value)            
        end
    end

    met push(self, obj):
        if self.head == nil:
            self.head = Node(obj)
            return nil
        end

        tail = nil
        for cur = self.head; cur; cur = cur.next:
            if cur.next == nil:
                tail = cur
                break
            end
        end

        if tail == nil:  // impossible
            return Error("not found tail", Error.VALUE)
        end

        tail.next = Node(obj)
        return nil
    end

    met insert(self, index, obj):
        i = 0
        prev = nil
        cur = self.head
        for:
            if index == i:
                // insert node
                node = Node(obj)
                if prev == nil:
                    head = self.head
                    node.next = head
                    self.head = node
                elif cur == nil:
                    prev.next = node
                else:
                    next = prev.next
                    node.next = next
                    prev.next = node
                end
                break
            end
            if cur == nil:
                break
            end
            prev = cur
            cur = cur.next
            i += 1
        end
    end
end
@}
