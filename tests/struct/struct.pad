{@
def case1():
    puts("Test struct/struct case1")

    struct Animal:
        name = nil
        age = nil
    end

    animal = Animal("Tama", 20)

    assert(animal.name == "Tama")
    assert(animal.age == 20)
end

def case2():
    puts("Test struct/struct case2")

    struct Animal:
        struct Head:
            eyes = 2
            mouth = 1
        end

        def getEyes():
            return Animal.Head().eyes
        end

        met getMouth(self):
            animal = Animal()
            head = animal.Head()
            return head.mouth
        end
    end

    assert(Animal.getEyes() == 2)
    assert(Animal().getMouth() == 1)
end

def case3():
    puts("Test struct/struct case3")

    struct Head:
        eyes = 2
        mouth = 1
    end

    struct Animal:
        def new(eyes, mouth):
            self = Animal()
            self.head = Head(eyes, mouth)
            return self
        end

        met getEyes(self):
            return self.head.eyes
        end

        met getMouth(self):
            return self.head.mouth
        end
    end

    animal = Animal.new(3, 2)
    assert(animal.getEyes() == 3)
    assert(animal.getMouth() == 2)
end

def case4():
    puts("Test struct/struct case4")

    struct Calculator:
        met calc(self, lhs, op, rhs):
            if op == "+":
                return lhs + rhs
            elif op == "-":
                return lhs - rhs
            end
        end
    end

    c = Calculator()
    assert(c.calc(10, "+", 5) == 15)
    assert(c.calc(10, "-", 5) == 5)
end

def case5():
    puts("Test struct/struct case5")

    struct A:
        a = nil

        def new():
            self = A()
            self.a = A()
            self.a.a = A()
            self.a.a.a = 1
            return self
        end
    end

    a = A.new()
    assert(a.a.a.a == 1)
end

def case6():
    puts("Test struct/struct case6")

    struct File:
        fileno = nil
    end

    struct TextFile:
        extract(File)
    end

    f = TextFile(1)
    assert(f.fileno == 1)

    struct Walkable:
        met walk(self):
            return 1
        end
    end

    struct Swimable:
        met swim(self):
            return 2
        end
    end

    struct Animal:
        name = "Tama"
        extract(Walkable, Swimable)
    end

    a = Animal()
    assert(a.name == "Tama")
    assert(a.walk() == 1)
    assert(a.swim() == 2)
end

def case7():
    struct Human:
        hp = 100
        power = 10
        status = "alive"
    end

    struct Game:
        frame = 0
        humans = []
        maxHumans = 10

        def new():
            self = Game()

            for i = 0; i < self.maxHumans; i += 1:
                human = Human()
                self.humans.push(human)
            end

            return self
        end

        met update(self):
            if self.frame % 4 == 0:
                h1 = self.humans[0]
                h2 = self.humans[1]
                h1.hp -= h2.power
            end
            if self.checkGameOver():
                return false
            end
            self.frame += 1
            return true
        end

        met checkGameOver(self):
            alived = false
            for i = 0; i < len(self.humans); i += 1:
                h = self.humans[i]
                if h.hp <= 0:
                    h.status = "died"
                end
                if h.status == "alive":
                    alived = true
                end
            end
            return not alived
        end
    end

    game = Game.new()
    for i = 0; i < 10; i += 1:
        game.update()
    end
end

def case8():
    puts("Test struct/struct case8")

    struct Animal:
        met swim(self):
            return "swiming"
        end
    end

    assert(Animal.swim() == "swiming")
    assert(Animal().swim() == "swiming")

    struct A:
        a = 1
        met inc(self):
            self.a += 1
        end
    end

    a = A()
    assert(a.a == 1)
    a.inc()
    assert(a.a == 2)
end

def case9():
    puts("Test struct/struct case9")

    b = 100 
    
    def f3():
        return 3
    end

    c = 200

    struct A:
        b = 1

        def f1():
            return b
        end

        met f2(self):
            return self.b
        end

        met f3(self):
            return c
        end

        met f4(self):
            d = 300
            return d
        end
    end

    a = A()
    // assert(a.f1() == 100)  // selfつけなくても取得できちゃう
    assert(a.f2() == 1)  // selfつけても取得できる
    a.b = 2  // インスタンス変数の値を変える
    // assert(a.f1() == 100)  // クラス変数にアクセスするので値は変わらない
    assert(a.f2() == 2)  // self付けた場合はインスタンス変数にアクセスできる

    assert(a.f3() == 200)
    assert(a.f4() == 300)
end

def case10():
    puts("Test struct/struct case10")

    struct S:
        a = 1
        met inc(self):
            self.a += 1
        end
    end

    S.inc()

    s = S()
    s.inc()
    assert(s.a == 2)
end

def case11():
    puts("Test struct/struct case11")

    struct S:
        A = 1
        def f():
            return S.A
        end
    end

    assert(S.A == 1)
    assert(S.f() == 1)
end

def case12():
    puts("Test struct/struct case12")

    struct S:
        A = 1
        def f1():
            def f2():
                return S.A
            end
            return f2()
        end
    end

    assert(S.A == 1)
    assert(S.f1() == 1)

    struct S:
        sum = 0
        for i = 0; i < 4; i += 1:
            sum += i
        end

        met f1(self):
            return self.sum
        end

        met f2(self):
            return S.sum
        end
    end

    s = S()
    assert(s.f1() == 6)
    assert(s.f2() == 6)
end

def case14():
    struct S:
        a = 0

        def inc():
            S.a += 1
        end
    end

    assert(S.a == 0)
    S.inc()
    assert(S.a == 0)
    S.a += 1
    assert(S.a == 1)

    // ATODO: fix me!
    struct T:
        a = 0

        def set():
            T.a = 1
        end
    end

    assert(T.a == 0)
    T.set()
    assert(T.a == 1)
end

def allTest():
    puts("Test struct/struct all")

    case1()
    case2()
    case3()
    case4()
    case5()
    case6()
    case7()
    case8()
    case9()
    case10()
    case11()
    case12()
    case14()
end

def main(name):
    puts("Test struct/struct")

    if name == "all":
        allTest()
    elif name == "case1":
        case1()
    elif name == "case2":
        case2()
    elif name == "case3":
        case3()
    elif name == "case4":
        case4()
    elif name == "case5":
        case5()
    elif name == "case6":
        case6()
    elif name == "case7":
        case7()
    elif name == "case8":
        case8()
    elif name == "case9":
        case9()
    elif name == "case10":
        case10()
    elif name == "case11":
        case11()
    elif name == "case12":
        case12()
    elif name == "case14":
        case14()
    end

    puts("Done struct/struct")
end
@}
