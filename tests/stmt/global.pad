{@

def case1():
    puts("Test stmt/global case1")

    a = 1
    global a
    assert(a == 1)
end

aa = 1

def case2():
    puts("Test stmt/global case2")

    struct S:
        aa = 2
        def func():
            global aa
            assert(aa == 1)
        end
    end

    S.func()

    s = S()
    s.func()
end

bb = 1

def case2_2():
    puts("Test stmt/global case2_2")

    assert(bb == 1)
    bb = 2
    assert(bb == 2)

    def func():
        global bb
        assert(bb == 1)
    end

    func()
end

b = 1

def case3():
    puts("Test stmt/global case3")

    assert(b == 1)
    global b
    assert(b == 1)
    b = 2
    assert(b == 2)
end

c = 1

def case4():
    puts("Test stmt/global case4")

    def func1():
        global c
        c = 2
    end

    func1()

    def func2():
        assert(c == 2)
    end

    func2()
end

d1 = 1
d2 = 1.0
d3 = "aaa"
d4 = 1

e1 = 2
e2 = 2.0

f1 = 2
f2 = 2.0
f3 = "aaa"

g1 = 4
g2 = 4.0

def case5():
    puts("Test stmt/global case4")

    def func1():
        global d1, d2, d3, d4
        d1 += 1
        d2 += 1.0
        d3 += "bbb"
        d4 += d4

        global e1, e2
        e1 -= 1
        e2 -= 1.0

        global f1, f2, f3
        f1 *= 2
        f2 *= 2.0
        f3 *= 2

        global g1, g2
        g1 /= 2
        g2 /= 2.0
    end

    func1()

    def func2():
        assert(d1 == 2)
        assert(d2 == 2.0)
        assert(d3 == "aaabbb")
        assert(d4 == 2)

        assert(e1 == 1)
        assert(e2 == 1.0)

        assert(f1 == 4)
        assert(f2 == 4.0)
        assert(f3 == "aaaaaa")

        assert(g1 == 2)
        assert(g2 == 2.0)
    end

    func2()
end

a = 1

def case6():
    puts("Test stmt/global case6")

    assert(a == 1)

    def f1():
        global a
        a = 2
    end

    f1()
    assert(a == 2)

    def f2():
        a = 3
    end

    f2()
    assert(a == 2)
end

/* In the case7. How to using of dict and object
   in scope chain solution. */

struct S:
    luck = "good"
end

d1 = { smell: "good" }
d2 = { legs: 4 }
a1 = [1, 2, 3]
s = S()

def case7():
    puts("Test stmt/global case7")

    def f1():
        assert(d1.smell == "good")
        assert(d2.legs == 4)
        assert(a1[0] == 1)
        assert(s.luck == "good")
        d1 = { smell: "bad" }
        d2.legs = 2
        a1[0] = 10
        s.luck = "bad"
    end

    f1()

    def f2():
        assert(d1.smell == "good")
        assert(d2.legs == 2)
        assert(a1[0] == 10)
        assert(s.luck == "bad")

        d1["smell"] = "ok"
        d2["legs"] = 3
    end

    f2()

    def f3():
        assert(d1.smell == "ok")
        assert(d2.legs == 3)
    end

    f3()

    def f4():
        a1 = [-1, -2]
        assert(a1[0] == -1 and a1[1] == -2)
        global a1
        assert(a1[0] == 10)
    end

    f4()
end

def all():
    puts("all")
    case1()
    case2()
    case2_2()
    case3()
    case4()
    case5()
    case6()
    case7()
end

def main(case):
    if case == "all":
        all()
    elif case == "case1":
        case1()
    elif case == "case2":
        case2()
    elif case == "case2_2":
        case2_2()
    elif case == "case3":
        case3()
    elif case == "case4":
        case4()
    elif case == "case5":
        case5()
    elif case == "case6":
        case6()
    elif case == "case7":
        case7()
    end
end

@}