{@

def case1():
    puts("Test stmt/for-stmt case1")

    struct Node:
        next = nil
    end
    
    head = Node(Node(Node()))

    for cur = head; cur; cur = cur.next:
        assert(type(cur) == "object")  // TODO: Error!
    end
end

def case2():
    puts("Test stmt/for-stmt case2")

    struct Node:
        next = nil
    end
    
    head = Node(Node(Node()))

    for cur = head; ; cur = cur.next:
        if cur == nil:
            break
        end
        assert(type(cur) == "object")  // TODO: Error!
    end
end

def case3():
    puts("Test stmt/for-stmt case3")

    def func1(): assert(1) end
    def func2(): assert(1) end
    funcs = [
        ["func1", func1],
        ["func2", func2],
    ]

    for i = 0; i < len(funcs); i += 1:
        funcs[i][1]()
    end
end

def case4():
    puts("Test stmt/for-stmt case4")

    def c1():
        struct S:
        end
        puts(S)  // S is not defined
    end
    arr = [c1]
    arr[0]()
end

def case5():
    puts("Test stmt/for-stmt case5")

    sum = 0
    for i = 0; i < 4; i += 1:
        sum += i
    end

    assert(sum == 6)
end

def case6():
    puts("Test stmt/for-stmt case6")

    sum = 0
    i = 0
    for i < 4:
        sum += i
        i += 1
    end

    assert(sum == 6)
end

def case7():
    puts("Test stmt/for-stmt case7")

    sum = 0
    i = 0
    for:
        if i >= 4:
            break
        end
        sum += i
        i += 1
    end

    assert(sum == 6)
end

/********************
* list and for-stmt *
********************/

def case8():
    puts("Test stmt/for-stmt case8")

    lis = [0, 1, 2]
    for i = 0; i < 3; i += 1:
        lis.push(i)
    end

    assert(lis[0] == 0)
    assert(lis[1] == 1)
    assert(lis[2] == 2)
    assert(lis[3] == 0)
    assert(lis[4] == 1)
    assert(lis[5] == 2)
end

def case9():
    puts("Test stmt/for-stmt case9")

    lis = [0, 1, 2]
    ln = len(lis)
    for i = 0; i < ln; i += 1:
        el = lis.pop()
        assert(el == 2 - i)
    end
end

def case10():
    puts("Test stmt/for-stmt case10")

    lis = [0, 1, 2]
    i = 2
    for len(lis):
        assert(lis.pop() == i)
        i -= 1
    end
end

def case11():
    puts("Test stmt/for-stmt case11")

    lis = [0, 1, -1]
    for i = 0; lis[i] != -1; i += 1:
        assert(lis[i] == i)
    end
end

def case12():
    puts("Test stmt/for-stmt case12")

    mat = []
    for i = 0; i < 3; i += 1:
        row = []
        for j = 0; j < 3; j += 1:
            row.push(j)
        end
        mat.push(row)
    end

    assert(len(mat) == 3)
    assert(len(mat[0]) == 3)
    assert(mat[0][0] == 0)
    assert(mat[0][1] == 1)
    assert(mat[0][2] == 2)
end

def case13():
    puts("Test stmt/for-stmt case13")

    box = []
    for i = 0; i < 3; i += 1:
        row = []
        for j = 0; j < 3; j += 1:
            zrow = []
            for k = 0; k < 3; k += 1:
                zrow.push(k)
            end
            row.push(zrow)
        end
        box.push(row)
    end

    assert(len(box) == 3)
    assert(len(box[0]) == 3)
    assert(len(box[0][0]) == 3)
    assert(box[0][0][0] == 0)
    assert(box[0][0][1] == 1)
    assert(box[0][0][2] == 2)
end

/********************
* dict and for-stmt *
********************/

def case14():
    puts("Test stmt/for-stmt case14")

    d = {"sum": 0}

    for i = 0; i < 4; i += 1:
        d["sum"] += i
    end

    assert(d["sum"] == 6)
end

def case15():
    puts("Test stmt/for-stmt case15")
    
    d = {"lis": []}

    for i = 0; i < 4; i += 1:
        d["lis"].push(i)
    end

    assert(d["lis"][0] == 0)
    assert(d["lis"][1] == 1)
    assert(d["lis"][2] == 2)
    assert(d["lis"][3] == 3)
end

def case16():
    puts("Test stmt/for-stmt case16")
    
    d = {"outer": {"inner": 0}}

    for i = 0; i < 4; i += 1:
        d["outer"]["inner"] += i
    end

    assert(d["outer"]["inner"] == 6)
end

/***********************
* if-stmt and for-stmt *
***********************/

def case17():
    puts("Test stmt/for-stmt case17")

    for i = 0; i < 4; i += 1:
        if i == 0:
            assert(i == 0)
            sum = 0
            for j = 0; j < 4; j += 1:
                sum += j
            end
            assert(sum == 6)
        elif i == 1:
            assert(i == 1)
            for j = 0; j < 4; j += 1:
                if j == 2:
                    sum = 0
                    for k = 0; k < 4; k += 1:
                        sum += k
                    end
                    assert(sum == 6)
                end
            end
        elif i == 2:
            assert(i == 2)
        elif i == 3:
            assert(i == 3)
        end
    end
end

/**********************
* done case functions *
**********************/

def allTest():
    puts("Test stmt/for-stmt all")
    // TODO: needs refactoring to replace this to dict and function
    case1()
    case2()
    case3()
    // case4()  // TODO: fix error
    case5()
    case6()
    case7()
    case8()
    case9()
    case10()
    case11()
    case12()
    case13()
    case14()
    case15()
    case16()
    case17()
end

def main(name):
    puts("Test stmt/for-stmt")

    // TODO: needs refactoring to replace this to dict and function
    if name == "all":
        allTest()
    elif name == "case1":
        case1()
    elif name == "case2":
        case2()
    elif name == "case3":
        case3()
    elif name == "case4":
        case4()
    elif name == "case5":
        case5()
    elif name == "case6":
        case6()
    elif name == "case7":
        case7()
    elif name == "case8":
        case8()
    elif name == "case9":
        case9()
    elif name == "case10":
        case10()
    elif name == "case11":
        case11()
    elif name == "case12":
        case12()
    elif name == "case13":
        case13()
    elif name == "case14":
        case14()
    elif name == "case15":
        case15()
    elif name == "case16":
        case16()
    elif name == "case17":
        case17()
    else:
        eputs("invalid name", name)
    end

    puts("Done for-stmt")
end

@}
