{@
    def createMatrix():
        return [
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
        ]
    end

    def rotateRight(mat):
        m = createMatrix()
        for y = 0; y < len(mat); y += 1:
            for x = 0; x < len(mat[y]); x += 1:
                m[x][3 - y] = mat[y][x]
            end
        end
        return m
    end

    def rotateLeft(mat):
        m = createMatrix()
        for y = 0; y < len(mat); y += 1:
            for x = 0; x < len(mat[y]); x += 1:
                m[y][x] = mat[x][3 - y]
            end
        end
        return m
    end

    def showMatrix(mat):
        for y = 0; y < len(mat); y += 1:
            for x = 0; x < len(mat[y]); x += 1:
                puts(mat[y][x])
            end
            puts("-" * 40)
        end
    end

    mat = [
        [0, 1, 0, 0],
        [0, 1, 0, 0],
        [0, 1, 0, 0],
        [0, 1, 1, 0],
    ]

    m = rotateLeft(mat)
    // showMatrix(m)

    assert(m[0][0] == 0)
    assert(m[0][1] == 0)
    assert(m[0][2] == 0)
    assert(m[0][3] == 0)
    assert(m[1][0] == 0)
    assert(m[1][1] == 0)
    assert(m[1][2] == 0)
    assert(m[1][3] == 1)
    assert(m[2][0] == 1)
    assert(m[2][1] == 1)
    assert(m[2][2] == 1)
    assert(m[2][3] == 1)
    assert(m[3][0] == 0)
    assert(m[3][1] == 0)
    assert(m[3][2] == 0)
    assert(m[3][3] == 0)

    m = rotateRight(mat)
    // showMatrix(m)

    assert(m[0][0] == 0)
    assert(m[0][1] == 0)
    assert(m[0][2] == 0)
    assert(m[0][3] == 0)
    assert(m[1][0] == 1)
    assert(m[1][1] == 1)
    assert(m[1][2] == 1)
    assert(m[1][3] == 1)
    assert(m[2][0] == 1)
    assert(m[2][1] == 0)
    assert(m[2][2] == 0)
    assert(m[2][3] == 0)
    assert(m[3][0] == 0)
    assert(m[3][1] == 0)
    assert(m[3][2] == 0)
    assert(m[3][3] == 0)

    puts("OK")
@}