BNF of Cap's template language

           program: blocks

            blocks: ( code_block | ref_block | text_block ) blocks
        code_block: '{@' elems '@}'
         ref_block: '{:' formula ':}'
        text_block: .*
             elems: ( def | stmt | formula ) elems

              stmt: import_stmt |
                    if_stmt |
                    for_stmt |
                    break_stmt |
                    continue_stmt |
                    return_stmt

               def: func_def
          func_def: 'def' identifier func_def_params ':' (elems)? [ '@}' blocks '{@' ]* (elems)? 'end'
   func_def_params: '(' func_def_args ')'
     func_def_args: identifier [ ',' identifier ]*

       import_stmt: import_as_stmt | from_import_stmt
    import_as_stmt: 'import' string 'as' identifier
  from_import_stmt: 'from' string 'import' import_vars
       import_vars: import_var | '(' import_var [ ',' import_var ]* (',')? ')'
        import_var: identifier ( 'as' identifier )

           if_stmt: 'if' test ':' [ elems ]* ( elif_stmt | else_stmt | 'end' ) |
                    'if' test ':' '@}' [ blocks ]* '{@' ( elif_stmt | else_stmt | 'end' )
         elif_stmt: 'elif' test ':' elems ( elif_stmt | else_stmt | 'end' ) |
                    'elif' test ':' '@}' [ blocks ]* '{@' ( elif_stmt | else_stmt | 'end' )
         else_stmt: 'else' ':' [ elems ]* 'end'* |
                    'else' ':' '@}' [ blocks ]* '{@' 'end'*

          for_stmt: 'for' init_formula ';' comp_formula ';' update_formula ':' [(( '@}' blocks '{@' ) | elems )]* 'end' |
                    'for' comp_formula ':' [(( '@}' blocks '{@' ) | elems)]* 'end' |
                    'for' ':' [(( '@}' blocks '{@' ) | elems)]* 'end'
        break_stmt: 'break'
     continue_stmt: 'continue'
       return_stmt: 'return' [ formula ]*

           formula: assign_list |
                    multi_assign
       assign_list: assign [ ',' assign ]*
            assign: test '=' test [ '=' test ]*
      multi_assign: test_list [ '=' test_list ]*
     simple_assign: test [ '=' test ]*

         test_list: test [ ',' test ]*
              test: or_test
           or_test: and_test [ 'or' and_test ]*
          and_test: not_test [ 'and' not_test ]*
          not_test: 'not' not_test | comparison

        comparison: asscalc [ comp_op asscalc ]*
           asscalc: expr [ augassign expr ]*
              expr: term [ add_sub_op term ]*
              term: negative [ mul_div_op negative ]*
          nagative: ( '-' ) dot
               dot: call [ dot_op call ]*
              call: index [ '(' call_args ')' ]*
             index: factor [ '[' simple_assign ']' ]*

                    インデックスとコールは同じレイヤーにしないといけない
           - index: factor [ '[' simple_assign ']' ]*
            - call: index [ '(' call_args ')' ]*

            factor: atom | '(' formula ')'
              atom: nil |
                    false |
                    true |
                    digit |
                    string |
                    array |
                    dict |
                    identifier
         call_args: ( test [ ',' test ]* )
             array: '[' ( array_elems ) ']'
       array_elems: simple_assign [ ',' simple_assign ]*
              dict: '{' ( dict_elems ) '}'
        dict_elems: dict_elem [ ',' dict_elem ]*
         dict_elem: simple_assign ':' simple_assign
           comp_op: '==' | '!=' | '<=' | '>=' | '<' | '>'
        add_sub_op: '+' | '-'
        mul_div_op: '*' | '/' | '%'
            dot_op: '.'
         augassign: '+=' | '-=' | '*=' | '/=' | '%='
               nil:
             digit: [0-9]+
           newline: '\n'
  identifier_chain: ( identifier | identifier '.' ) identifier_chain
            string: '"' .* '"'
        identifier: [ [a-z] | [0-9] | _ ]+
