BNF of Cap's template language

           program: blocks 

            blocks: ( code-block | ref-block | text-block ) blocks
        code-block: '{@' elems '@}'
         ref-block: '{#' formula '#}'
        text-block: .*
             elems: ( stmt | formula ) elems

              stmt: import_stmt |
                    if_stmt |
                    for_stmt

       import_stmt: 'import' identifier_chain ( '@} ' | NEWLINE )+

           if_stmt: 'if' test ':' elems* ( elif_stmt | else_stmt | 'end' ) |
                    'if' test ':' '@}' blocks* '{@' ( elif_stmt | else_stmt | 'end' )
         elif_stmt: 'elif' test ':' elems ( elif_stmt | else_stmt | 'end' ) |
                    'elif' test ':' '@}' blocks* '{@' ( elif_stmt | else_stmt | 'end' )
         else_stmt: 'else' ':' elems* 'end'* |
                    'else' ':' '@}' blocks* '{@' 'end'*

          for_stmt: 'for' assign_list ';' test ';' test_list ':' elems 'end' |
                    'for' test ':' elems 'end' |
                    'for' ':' elems 'end'

           formula: assign_list |
                    multi_assign
      multi_assign: test_list ( '=' test_list )*
       assign_list: assign ( ',' assign )*
            assign: test '=' test ( '=' test )*
            
         test_list: test ( ',' test )*
              test: or_test
           or_test: and_test ( 'or' and_test )*
          and_test: not_test ( 'and' not_test )*
          not_test: 'not' not_test | comparison

        - comparison: asscalc ( comp_op asscalc )*
           - asscalc: expr ( augassign expr )*

              expr: term ( add_sub_op term )*
             - term: factor ( mul_div_op factor )*
            factor: atom | '(' test ')'
              atom: digit | string | identifier | caller

           comp_op: '==' | '!='
        add_sub_op: '+' | '-'
        mul_div_op: '*' | '/'
         augassign: '+=' | '-=' | '*=' | '/='
             digit: [0-9]+
           newline: '\n'
            caller: identifier_chain '(' test_list ')'
  identifier_chain: ( identifier | identifier '.' ) identifier_chain
            string: '"' .* '"'
        identifier: ( [a-z] | [0-9] | _ )+ 
