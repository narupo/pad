from tokens import Token
from tokenizer import Tokenizer
from nodes import *
from ast import AST
import unittest


class Test(unittest.TestCase):
    def test_tokenizer(self):
        t = Tokenizer()
        
        ts = t.parse('')
        self.assertEqual(len(ts), 0)

        ts = t.parse('abc+/%123')
        self.assertEqual(len(ts), 1)
        self.assertEqual(ts[0].kind, 'text-block')
        self.assertEqual(ts[0].value, 'abc+/%123')

        ts = t.parse('{@')
        self.assertEqual(len(ts), 1)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')

        ts = t.parse('{@@}')
        self.assertEqual(len(ts), 2)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'rbraceat')
        self.assertEqual(ts[1].value, '@}')

        ts = t.parse('{{')
        self.assertEqual(len(ts), 1)
        self.assertEqual(ts[0].kind, 'ldbrace')
        self.assertEqual(ts[0].value, '{{')

        ts = t.parse('{{}}')
        self.assertEqual(len(ts), 2)
        self.assertEqual(ts[0].kind, 'ldbrace')
        self.assertEqual(ts[0].value, '{{')
        self.assertEqual(ts[1].kind, 'rdbrace')
        self.assertEqual(ts[1].value, '}}')

        ts = t.parse('{{ a }}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'ldbrace')
        self.assertEqual(ts[0].value, '{{')
        self.assertEqual(ts[1].kind, 'identifier')
        self.assertEqual(ts[1].value, 'a')
        self.assertEqual(ts[2].kind, 'rdbrace')
        self.assertEqual(ts[2].value, '}}')

        ts = t.parse('aaa{@bbb@}ccc{@ddd@}eee')
        self.assertEqual(len(ts), 9)
        self.assertEqual(ts[0].kind, 'text-block')
        self.assertEqual(ts[0].value, 'aaa')
        self.assertEqual(ts[1].kind, 'lbraceat')
        self.assertEqual(ts[1].value, '{@')
        self.assertEqual(ts[2].kind, 'identifier')
        self.assertEqual(ts[2].value, 'bbb')
        self.assertEqual(ts[3].kind, 'rbraceat')
        self.assertEqual(ts[3].value, '@}')
        self.assertEqual(ts[4].kind, 'text-block')
        self.assertEqual(ts[4].value, 'ccc')
        self.assertEqual(ts[5].kind, 'lbraceat')
        self.assertEqual(ts[5].value, '{@')
        self.assertEqual(ts[6].kind, 'identifier')
        self.assertEqual(ts[6].value, 'ddd')
        self.assertEqual(ts[7].kind, 'rbraceat')
        self.assertEqual(ts[7].value, '@}')
        self.assertEqual(ts[8].kind, 'text-block')
        self.assertEqual(ts[8].value, 'eee')

        with self.assertRaises(Tokenizer.ParseError):
            t.parse('{@@@}')

        ts = t.parse('{@ a = b @}')
        self.assertEqual(len(ts), 5)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'identifier')
        self.assertEqual(ts[1].value, 'a')
        self.assertEqual(ts[2].kind, 'operator')
        self.assertEqual(ts[2].value, '=')
        self.assertEqual(ts[3].kind, 'identifier')
        self.assertEqual(ts[3].value, 'b')
        self.assertEqual(ts[4].kind, 'rbraceat')
        self.assertEqual(ts[4].value, '@}')

        ts = t.parse('{@ . @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'operator')
        self.assertEqual(ts[1].value, '.')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ , @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'comma')
        self.assertEqual(ts[1].value, ',')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ ( @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'lparen')
        self.assertEqual(ts[1].value, '(')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ ) @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'rparen')
        self.assertEqual(ts[1].value, ')')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ "" @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'string')
        self.assertEqual(ts[1].value, '')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ "content" @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'string')
        self.assertEqual(ts[1].value, 'content')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ "aa""bb" @}')
        self.assertEqual(len(ts), 4)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'string')
        self.assertEqual(ts[1].value, 'aa')
        self.assertEqual(ts[2].kind, 'string')
        self.assertEqual(ts[2].value, 'bb')
        self.assertEqual(ts[3].kind, 'rbraceat')
        self.assertEqual(ts[3].value, '@}')

        ts = t.parse('{@ import @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'import')
        self.assertEqual(ts[1].value, 'import')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ if @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'if')
        self.assertEqual(ts[1].value, 'if')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ elif @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'elif')
        self.assertEqual(ts[1].value, 'elif')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

        ts = t.parse('{@ else @}')
        self.assertEqual(len(ts), 3)
        self.assertEqual(ts[0].kind, 'lbraceat')
        self.assertEqual(ts[0].value, '{@')
        self.assertEqual(ts[1].kind, 'else')
        self.assertEqual(ts[1].value, 'else')
        self.assertEqual(ts[2].kind, 'rbraceat')
        self.assertEqual(ts[2].value, '@}')

    def test_ast(self):
        t = Tokenizer()
        a = AST()

        a.parse(t.parse(''))
        self.assertEqual(a.root, None)

        a.parse(t.parse('abc'))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.text_block), TextBlockNode)
        self.assertEqual(a.root.lhs.text_block.text, 'abc')

        a.parse(t.parse('{@ import alias @}'))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.import_), ImportNode)
        self.assertEqual(a.root.lhs.code_block.formula.import_.identifier, 'alias')
        self.assertEqual(c.imported_alias, True)

        a.parse(t.parse('aaa{@ import alias @}bbb{@ import config @}ccc'))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.text_block), TextBlockNode)
        self.assertEqual(a.root.lhs.text_block.text, 'aaa')
        self.assertEqual(type(a.root.rhs), BinNode)
        self.assertEqual(type(a.root.rhs.lhs), BlockNode)
        self.assertEqual(type(a.root.rhs.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.rhs.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.rhs.lhs.code_block.formula.import_), ImportNode)
        self.assertEqual(a.root.rhs.lhs.code_block.formula.import_.identifier, 'alias')
        self.assertEqual(type(a.root.rhs.rhs), BinNode)
        self.assertEqual(type(a.root.rhs.rhs.lhs), BlockNode)
        self.assertEqual(type(a.root.rhs.rhs.lhs.text_block), TextBlockNode)
        self.assertEqual(a.root.rhs.rhs.lhs.text_block.text, 'bbb')
        self.assertEqual(type(a.root.rhs.rhs.rhs), BinNode)
        self.assertEqual(type(a.root.rhs.rhs.rhs.lhs), BlockNode)
        self.assertEqual(type(a.root.rhs.rhs.rhs.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.rhs.rhs.rhs.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.rhs.rhs.rhs.lhs.code_block.formula.import_), ImportNode)
        self.assertEqual(a.root.rhs.rhs.rhs.lhs.code_block.formula.import_.identifier, 'config')
        self.assertEqual(type(a.root.rhs.rhs.rhs.rhs), BinNode)
        self.assertEqual(type(a.root.rhs.rhs.rhs.rhs.lhs), BlockNode)
        self.assertEqual(type(a.root.rhs.rhs.rhs.rhs.lhs.text_block), TextBlockNode)
        self.assertEqual(a.root.rhs.rhs.rhs.rhs.lhs.text_block.text, 'ccc')

        a.parse(t.parse('''{@
            import alias
            alias.set("dtl", "run bin/date-line/date-line.py")
@}'''))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.import_), ImportNode)
        self.assertEqual(a.root.lhs.code_block.formula.import_.identifier, 'alias')
        self.assertEqual(type(a.root.lhs.code_block.formula.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.formula.caller), CallerNode)
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.identifiers[0], 'alias')
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.identifiers[1], 'set')
        self.assertEqual(len(a.root.lhs.code_block.formula.formula.caller.args), 2)
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.args[0], 'dtl')
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.args[1], 'run bin/date-line/date-line.py')
        self.assertEqual(c.imported_alias, True)
        self.assertEqual(c.alias_map.get('dtl', None), 'run bin/date-line/date-line.py')

        a.parse(t.parse('''{@
            import config
            config.set("editor", "subl")
@}'''))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.import_), ImportNode)
        self.assertEqual(a.root.lhs.code_block.formula.import_.identifier, 'config')
        self.assertEqual(type(a.root.lhs.code_block.formula.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.formula.caller), CallerNode)
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.identifiers[0], 'config')
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.identifiers[1], 'set')
        self.assertEqual(len(a.root.lhs.code_block.formula.formula.caller.args), 2)
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.args[0], 'editor')
        self.assertEqual(a.root.lhs.code_block.formula.formula.caller.args[1], 'subl')
        self.assertEqual(c.imported_config, True)
        self.assertEqual(c.config_map.get('editor', None), 'subl')

        a.parse(t.parse('''{@
            a = "s"
@}'''))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.expr), ExprNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr), AssignExprNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr.assignable_operand), AssignableOperandNode)
        self.assertEqual(a.root.lhs.code_block.formula.expr.assign_expr.assignable_operand.identifier, 'a')
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr.assign_operator), AssignOperatorNode)
        self.assertEqual(a.root.lhs.code_block.formula.expr.assign_expr.assign_operator.operator, '=')
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr.operand), OperandNode)
        self.assertEqual(a.root.lhs.code_block.formula.expr.assign_expr.operand.string, 's')
        self.assertEqual(c.syms.get('a'), 's')

        a.parse(t.parse('''{{ a }}'''))
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.ref_block), RefBlockNode)
        self.assertEqual(a.root.lhs.ref_block.identifier, 'a')

        a.parse(t.parse('''{@
            a = "s"
@}{{ a }}'''))
        c = a.traverse()
        self.assertEqual(type(a.root), BinNode)
        self.assertEqual(type(a.root.lhs), BlockNode)
        self.assertEqual(type(a.root.lhs.code_block), CodeBlockNode)
        self.assertEqual(type(a.root.lhs.code_block.formula), FormulaNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.expr), ExprNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr), AssignExprNode)
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr.assignable_operand), AssignableOperandNode)
        self.assertEqual(a.root.lhs.code_block.formula.expr.assign_expr.assignable_operand.identifier, 'a')
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr.assign_operator), AssignOperatorNode)
        self.assertEqual(a.root.lhs.code_block.formula.expr.assign_expr.assign_operator.operator, '=')
        self.assertEqual(type(a.root.lhs.code_block.formula.expr.assign_expr.operand), OperandNode)
        self.assertEqual(a.root.lhs.code_block.formula.expr.assign_expr.operand.string, 's')
        self.assertEqual(type(a.root.rhs), BinNode)
        self.assertEqual(type(a.root.rhs.lhs), BlockNode)
        self.assertEqual(type(a.root.rhs.lhs.ref_block), RefBlockNode)
        self.assertEqual(c.syms.get('a'), 's')
        self.assertEqual(c.buffer, 's')
